pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-cred') // Docker Hub credentials in Jenkins
        DOCKER_HUB_REPO = 'irfan845/labour-hiring-system'
        KUBECONFIG = '/home/irfan/.kube/config' // Path to kubeconfig
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Irfan-rather/labourHiringSystem.git'
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            sh '''
                            docker buildx create --use || echo "Buildx already exists"
                            docker build -t $DOCKER_HUB_REPO-backend:latest .
                            echo "$DOCKER_HUB_CREDENTIALS_PSW" | docker login -u "$DOCKER_HUB_CREDENTIALS_USR" --password-stdin
                            docker push $DOCKER_HUB_REPO-backend:latest
                            '''
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            sh '''
                            docker buildx create --use || echo "Buildx already exists"
                            docker build -t $DOCKER_HUB_REPO-frontend:latest .
                            echo "$DOCKER_HUB_CREDENTIALS_PSW" | docker login -u "$DOCKER_HUB_CREDENTIALS_USR" --password-stdin
                            docker push $DOCKER_HUB_REPO-frontend:latest
                            '''
                        }
                    }
                }
                stage('Build MongoDB Image') {
                    steps {
                        dir('mongo') {
                            sh '''
                            docker buildx create --use || echo "Buildx already exists"
                            docker build -t $DOCKER_HUB_REPO-mongo:latest .
                            echo "$DOCKER_HUB_CREDENTIALS_PSW" | docker login -u "$DOCKER_HUB_CREDENTIALS_USR" --password-stdin
                            docker push $DOCKER_HUB_REPO-mongo:latest
                            '''
                        }
                    }
                }
            }
        }
         
        stage('Deploy to Kubernetes') {
            stages {
                stage('Create Namespace') {
                    steps {
                        sh '''
                        export KUBECONFIG=$KUBECONFIG
                        kubectl apply -f k8s/namespace.yml
                        '''
                    }
                }

                stage('Deploy MongoDB') {
                    steps {
                        dir('k8s/mongo') {
                            sh '''
                            export KUBECONFIG=$KUBECONFIG
                            kubectl apply -f mongo-deployment.yml 
                            kubectl apply -f mongo-service.yml 
                            '''
                        }
                    }
                }

                stage('Deploy Backend') {
                    steps {
                        dir('k8s/backend') {
                            sh '''
                            export KUBECONFIG=$KUBECONFIG
                            kubectl apply -f backend-deployment.yml
                            kubectl apply -f backend-service.yml 
                            kubectl apply -f backend-config.yml
                            '''
                        }
                    }
                }

                stage('Deploy Frontend') {
                    steps {
                        dir('k8s/frontend') {
                            sh '''
                            export KUBECONFIG=$KUBECONFIG
                            kubectl apply -f frontend-deployment.yml
                            kubectl apply -f frontend-service.yml 
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
